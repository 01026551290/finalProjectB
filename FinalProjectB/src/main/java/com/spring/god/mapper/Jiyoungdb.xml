<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jiyoungdb">
      
<!-- DTO(VO)로 넘어온 값을 받아서 DB에서 처리해주는 것
      이때 조심해야할 일은 사용자가 만든 클래스명은 반드시 전체 패키지명까지 기술해주어야 한다. -->
   <insert id="register" parameterType="com.spring.god.jiyoung.model.MemberVO">
      insert into MEMBER(IDX, NAME, MEMBERID, PWD, NICKNAME, EMAIL, GENDER, BRITHDAY, TEL)
      values(SEQ_MEMBER_IDX.nextval, #{name},#{memberId}, #{pwd}, #{nickName}, #{email}, #{gender}, #{brithDay}, #{tel})
   </insert>    
   
   <insert id="register1" parameterType="com.spring.god.jiyoung.model.MemberVO">
      insert into LOGIN_MEMBER(FK_MEMBERID, PWD, NICKNAME, FK_IDX)
      values(#{memberId}, #{pwd}, #{nickName},SEQ_MEMBER_IDX.currval)
   </insert>  
   
   <select id="isUseMEMBERID" parameterType="String" resultType="int">
   	select count(*)
   	from MEMBER
   	where MEMBERID = #{memberId}
   </select>
   
   <select id="isUseNICKNAME" parameterType="String" resultType="int">
   	select count(*)
   	from MEMBER
   	where NICKNAME = #{nickName}
   </select>
   
   <select id="isUseEMAIL" parameterType="String" resultType="int">
   	select count(*)
   	from MEMBER
   	where EMAIL = #{email}
   </select>
   
   <resultMap type="HASHMAP" id="loginMap">
		<result property="FK_MEMBERID"  column="FK_MEMBERID" javaType="String"/>
		<result property="PWD"  column="PWD" javaType="String"/>
		<result property="NICKNAME"  column="NICKNAME" javaType="String"/>
		<result property="FK_IDX"  column="FK_IDX" javaType="int"/>		
	</resultMap>
   
    <select id="getLoginMember" parameterType="HashMap" resultType="com.spring.god.jiyoung.model.MemberVO">
		SELECT IDX, MEMBERID, NICKNAME, PWD, NAME, EMAIL, BRITHDAY, substr(TEL, 0, 3) as tel,  substr(TEL, 4, 4) as tel2, substr(TEL, 8) as tel3, GENDER, REGISTERDAY, STATUS
		, GRADE, POINT, PICTURE, FINALLOGINDATE, FINALPWDATE
		from MEMBER
		where status = 1 and MEMBERID = #{userid} and PWD = #{pwd}  
   </select>
   
    <select id="getidFind" parameterType="HashMap" resultType="String">
		SELECT MEMBERID
		from MEMBER
		where status = 1 and NAME = #{name} and EMAIL = #{email}
   </select> 
   
   <select id="isUserExists" parameterType="HashMap" resultType="int">
		SELECT count(*)
		from MEMBER
		where status = 1 and memberid = #{userid} and email = #{email}
   </select>
   
  <update id="updatePwdUser" parameterType="HashMap">
	   UPDATE MEMBER SET PWD = #{pwd}, tel = '010'||#{tel2}||#{tel3}
	   where status = 1 and memberid = #{userid}
  </update>
   
   <select id="memberEdit" parameterType="int" resultType="com.spring.god.jiyoung.model.MemberVO">
	  SELECT IDX, MEMBERID, NICKNAME, PWD, NAME, EMAIL, BRITHDAY, substr(TEL, 4, 4) as tel2, substr(TEL, 8) as tel3, GENDER, REGISTERDAY, STATUS
		, GRADE, POINT, PICTURE, FINALLOGINDATE, FINALPWDATE
		from MEMBER
	   where idx = #{idx}
   </select>
   
    <update id="memberEditEnd" parameterType="com.spring.god.jiyoung.model.MemberVO">
	   UPDATE MEMBER SET PWD = #{pwd}, NICKNAME = #{nickName}, EMAIL = #{email}, TEL = #{tel}
	   where status = 1 and memberid = #{memberId}
  </update>
   
   <update id="memberout" parameterType="HashMap">
	   UPDATE MEMBER set status = 0 , DELETEDAYE =SYSDATE
	   where status = 1 and memberId = #{memberId} and pwd = #{pwd}
   </update> 
   
	<update id="add_withFile" parameterType="com.spring.god.jiyoung.model.MemberVO"> 	
 		update MEMBER set picture = #{picture}
		where status = 1 and memberId = #{memberId}
	 </update> 
	 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	<!-- 여기서부터 board!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --> 
	 
	  <!-- === #56. 글쓰기(파일첨부가 없는 글쓰기) === -->
	 <!--
	 <insert id="add" parameterType="com.spring.board.model.BoardVO"> 
	 	insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status)
		values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
	 </insert>
	 -->
	 
	 <!-- === #129. 답변형 게시판의 글쓰기(파일첨부가 없는 글쓰기) === 
	                  먼저 #56. 을 주석처리한 후 아래처럼 해야 한다. -->
	 <insert id="add" parameterType="com.spring.board.model.BoardVO"> 
	 	<if test='fk_seq.equals("")'>
	 		insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno)
			values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, default, default) 
		</if>
		
		<if test='!fk_seq.equals("")'>
			insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno)
			values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depthno}+1)  
	 	</if>
	 </insert>
	 
	 <!-- === #140. 답변형 게시판의 글쓰기(파일첨부가 없는 글쓰기) === -->
	  <insert id="add_withFile" parameterType="com.spring.board.model.BoardVO"> 
	 	<if test='fk_seq.equals("")'>
	 		insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno, fileName, orgFilename, fileSize)
			values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, default, default, #{fileName}, #{orgFilename}, #{fileSize}) 
		</if>
		
		<if test='!fk_seq.equals("")'>
			insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno, fileName, orgFilename, fileSize)
			values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depthno}+1, #{fileName}, #{orgFilename}, #{fileSize})  
	 	</if>
	 </insert>
	 
	 <!-- === #60. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 === -->
	 <!--
	 <select id="boardListNoSearch" resultType="com.spring.board.model.BoardVO">
		 select seq, fk_userid, name, subject,  
		        readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		 from tblBoard
		 where status = 1
		 order by seq desc
	 </select>
	 -->
	 
	 <!-- 전체 글목록을 보여줄때 댓글이 딸린 글목록은 댓글의 갯수를 보여준다. 
	            먼저 #60. 을 주석처리하고서 아래의 작업을 한다. -->
	 <!-- === #92. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 === -->
	 <!-- 
	 <select id="boardListNoSearch" resultType="com.spring.board.model.BoardVO">
		 select seq, fk_userid, name, subject,  
		        readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate,
		        commentCount
		 from tblBoard
		 where status = 1
		 order by seq desc
	 </select>
	  -->
	 
	 <!-- === #100. 페이징 처리를 안한 검색어가 있는 전체 글목록 보여주기 === -->
	 <select id="boardListSearch" resultType="com.spring.board.model.BoardVO" parameterType="HashMap">
		 select seq, fk_userid, name, subject,  
		        readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate,
		        commentCount
		 from tblBoard
		 where status = 1
		 <if test='searchWord != "" '>
		     and ${colname} like '%'|| #{searchWord} ||'%'
		 </if>
		 order by seq desc
	 </select>
	 
	 
	 <!-- === #65. 글 1개 보여주기 (댓글쓰기가 없는 게시판) === --> 
	 <!-- 
	 <select id="getView" parameterType="String" resultType="com.spring.board.model.BoardVO">
	 	select previousseq, previoussubject, 
		       seq, fk_userid, name, subject, content, readCount, regDate,
		       nextseq, nextsubject 
		from 
		(
		    select lag(seq, 1) over(order by seq desc) as previousseq
		         , lag(subject, 1) over(order by seq desc) as previoussubject
		         , seq, fk_userid, name, subject, content
		         , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , lead(seq, 1) over(order by seq desc) as nextseq
		         , lead(subject, 1) over(order by seq desc) as nextsubject
		    from tblBoard
		    where status = 1
		) V
		where V.seq = #{seq}
	 </select>
	 -->
	 
	 <!-- === #93. 글 1개 보여주기 (댓글쓰기가 있는 게시판) === 
	                            먼저 위의  #65. 을 주석처리 한다. -->
	 <!--
	 <select id="getView" parameterType="String" resultType="com.spring.board.model.BoardVO">
	 	select previousseq, previoussubject, 
		       seq, fk_userid, name, subject, content, readCount, regDate,
		       nextseq, nextsubject 
		     , commentCount
		from 
		(
		    select lag(seq, 1) over(order by seq desc) as previousseq
		         , lag(subject, 1) over(order by seq desc) as previoussubject
		         , seq, fk_userid, name, subject, content
		         , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , lead(seq, 1) over(order by seq desc) as nextseq
		         , lead(subject, 1) over(order by seq desc) as nextsubject
		         , commentCount
		    from tblBoard
		    where status = 1
		) V
		where V.seq = #{seq}
	 </select>
	 -->
	 
	<!--  === #122. 글 1개 보여주기 (댓글쓰기 및 답변형 게시판) === 
	                            먼저 위의  #93. 을 주석처리 한다. 
	 <select id="getView" parameterType="String" resultType="com.spring.board.model.BoardVO">
	 	select previousseq, previoussubject, 
		       seq, fk_userid, name, subject, content, readCount, regDate,
		       nextseq, nextsubject 
		     , commentCount
		     , groupno, fk_seq, depthno
		from 
		(
		    select lag(seq, 1) over(order by seq desc) as previousseq
		         , lag(subject, 1) over(order by seq desc) as previoussubject
		         , seq, fk_userid, name, subject, content
		         , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , lead(seq, 1) over(order by seq desc) as nextseq
		         , lead(subject, 1) over(order by seq desc) as nextsubject
		         , commentCount
		         , groupno, fk_seq, depthno
		    from tblBoard
		    where status = 1
		) V
		where V.seq = #{seq}
	 </select> -->
	 
	  <!-- === #145. 글 1개 보여주기 (댓글쓰기 및 답변형 첨부파일이 있는 게시판) === 
	                            먼저 위의  #122. 을 주석처리 한다. -->
	 <select id="getView" parameterType="String" resultType="com.spring.board.model.BoardVO">
	 	select previousseq, previoussubject, 
		       seq, fk_userid, name, subject, content, readCount, regDate,
		       nextseq, nextsubject 
		     , commentCount
		     , groupno, fk_seq, depthno
		     , fileName
		     , orgFilename
		     , fileSize
		from 
		(
		    select lag(seq, 1) over(order by seq desc) as previousseq
		         , lag(subject, 1) over(order by seq desc) as previoussubject
		         , seq, fk_userid, name, subject, content
		         , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , lead(seq, 1) over(order by seq desc) as nextseq
		         , lead(subject, 1) over(order by seq desc) as nextsubject
		         , commentCount
		         , groupno, fk_seq, depthno
		         , fileName
		         , orgFilename
		         , fileSize
		    from tblBoard
		    where status = 1
		) V
		where V.seq = #{seq}
	 </select>
	 
	 <!-- === #66. 글 조회수 1증가 하기 === --> 
	 <update id="setAddReadCount" parameterType="String">
	 	update tblBoard set readCount = readCount + 1 
	 	where status = 1 and seq = #{seq}
	 </update>
	 	 
	 
	 <!-- === #74. 글수정 및 글삭제시 암호일치 여부 알아오기 === --> 
	 <select id="checkPW" parameterType="com.spring.board.model.BoardVO" resultType="int"> 
	 	select count(*)
		from tblBoard
		where seq = #{seq} and pw = #{pw}
	 </select>
	 
	 
	 <!-- === #76. 글 1개를 수정한다. === -->
	 <update id="updateBoard" parameterType="com.spring.board.model.BoardVO">
	 	update tblBoard set subject = #{subject}
	 	                  , content = #{content}
	 	                  , regdate = sysdate 
	 	where seq = #{seq}
	 </update>
	 
	 
	 <!-- === #81. 1개글 삭제하기(우리는 update 로 처리하겠다) === -->
	 <update id="deleteBoard" parameterType="com.spring.board.model.BoardVO">
	 	update tblBoard set status = 0
	 	where seq = #{seq}
	 </update>
	 
	 <!--  === #89. 댓글쓰기(tblComment 테이블에 insert) === -->
	 <insert id="addComment" parameterType="com.spring.board.model.CommentVO">
    	insert into tblComment(seq, fk_userid, name, content, regDate, parentSeq, status)
        values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default)
    </insert>
	 
	 <!--  === #90. tblBoard 테이블에 commentCount 컬럼의 값을 1증가(update) === -->  
	 <update id="updateCommentCount" parameterType="String">
    	update tblBoard set commentCount = commentCount + 1 
    	where seq = #{parentSeq}
    </update>
    
     <!-- === #90. 원게시물에 딸린 댓글보여주기 === -->
     <select id="getCommentList" parameterType="String" resultType="com.spring.board.model.CommentVO"> 
     	select name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate 
     	from tblComment
     	where parentSeq = #{parentSeq}
     	order by seq desc
     </select>
     
     <!--  === #95. 원게시물에 딸린 모든 댓글들을 삭제하도록 한다. === -->
     <delete id="deleteComment" parameterType="String">
     	delete from tblComment
        where parentSeq = #{seq} 
     </delete>
	 
	 
	 <!--  === #106. 검색어 입력시 자동글 완성하기 6 === --> 
	 <select id="wordSearchShow" parameterType="HashMap" resultType="String"> 
		 select ${searchType}
		 from tblBoard
		 where lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
	 </select>
	 
	 
	<!--  === #112. 검색조건이 없을 경우의 총 게시물 건수(totalCount) === -->
	<select id="getTotalCountWithNOsearch" resultType="int">
		select count(*)
		from tblBoard
		where status = 1
	</select>  
	
	
	<!-- === #115. 검색조건이 있을 경우의 총 게시물 건수(totalCount) === --> 
	<select id="getTotalCountWithSearch" parameterType="HashMap" resultType="int"> 
		select count(*)
		from tblBoard
		where status = 1
		and ${searchType} like '%'|| #{searchWord} ||'%' 
	</select> 
	 
	 
	<!--  === #118. 페이징 처리한 글목록 가져오기(검색이 있든지 , 검색이 없든지 다 포함한것) === --> 
	<!--
	<select id="boardListWithPaging" parameterType="HashMap" resultType="com.spring.board.model.BoardVO"> 
		select seq, fk_userid, name, subject, readcount, regDate, commentCount 
		from 
		(
		    select rownum AS rno
		         , seq, fk_userid, name, subject, readcount, regDate, commentCount 
		    from
		    (
		        select seq, fk_userid, name, subject,  
		               readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate,
		               commentCount
		        from tblBoard
		        where status = 1
		     <if test='searchWord != "" '>   
		        and ${searchType} like '%'|| #{searchWord} ||'%'
		     </if>   
		        order by seq desc
		    ) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	--> 
	
	
	<!--   === #142. 첨부파일이 있는 답변형 게시판의 페이징 처리한 글목록 가져오기(검색이 있든지 , 검색이 없든지 다 포함한것) === 
	                              먼저, #130. 을 주석처리한 이후 아래처럼 해야 한다.
	
	<select id="boardListWithPaging" parameterType="HashMap" resultType="com.spring.board.model.BoardVO"> 
		select seq, fk_userid, name, subject, readcount, regDate, commentCount
		     , groupno, fk_seq, depthno 
		from 
		(
		    select rownum AS rno
		         , seq, fk_userid, name, subject, readcount, regDate, commentCount  
		         , groupno, fk_seq, depthno 
		    from
		    (
		        select seq, fk_userid, name, subject,  
		               readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate,
		               commentCount,
		               groupno, fk_seq, depthno
		        from tblBoard
		        where status = 1
		     <if test='searchWord != "" '>   
		        and ${searchType} like '%'|| #{searchWord} ||'%'
		     </if> 
		        start with fk_seq = 0
		        connect by prior seq = fk_seq
		        order siblings by groupno desc, seq asc
		        order siblings by 를 사용하는 이유는
		                        그냥 정렬(order by)하면 계층구조가 깨진다.
		                        그래서 계층구조를 그대로 유지하면서
		                        동일한 groupno 를 가진 행끼리 정렬을 하려면
		             siblings 를 써야 한다. 
		    ) V
		) T
		where rno between #{startRno} and #{endRno}
	</select> -->
	
	
	<!--  === #128. tblBoard 테이블에서 groupno 컬럼의 최대값 구하기 === 
	
	-->
	<select id="getGroupnoMax" resultType="int">
	    select nvl(max(groupno), 0)
		from tblBoard
	</select>
	 
	<!--  === #130. 답변형 게시판의 페이징 처리한 글목록 가져오기(검색이 있든지 , 검색이 없든지 다 포함한것) === 
	                              먼저, #118. 을 주석처리한 이후 아래처럼 해야 한다.
	--> 
	<select id="boardListWithPaging" parameterType="HashMap" resultType="com.spring.board.model.BoardVO"> 
		select seq, fk_userid, name, subject, readcount, regDate, commentCount
		     , groupno, fk_seq, depthno
		     , fileName, orgFilename, fileSize
		from 
		(
		    select rownum AS rno
		         , seq, fk_userid, name, subject, readcount, regDate, commentCount  
		         , groupno, fk_seq, depthno
		         , fileName, orgFilename, fileSize
		          
		    from
		    (
		        select seq, fk_userid, name, subject,  
		               readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate,
		               commentCount,
		               groupno, fk_seq, depthno,
		               fileName, orgFilename, fileSize
		        from tblBoard
		        where status = 1
		     <if test='searchWord != "" '>   
		        and ${searchType} like '%'|| #{searchWord} ||'%'
		     </if> 
		        start with fk_seq = 0
		        connect by prior seq = fk_seq
		        order siblings by groupno desc, seq asc
		        <!-- order siblings by 를 사용하는 이유는
		                        그냥 정렬(order by)하면 계층구조가 깨진다.
		                        그래서 계층구조를 그대로 유지하면서
		                        동일한 groupno 를 가진 행끼리 정렬을 하려면
		             siblings 를 써야 한다.  -->
		    ) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
      
</mapper>