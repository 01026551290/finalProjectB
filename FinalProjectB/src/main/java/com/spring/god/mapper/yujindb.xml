<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="yujindb">
   
   <select id="getTotalCntHotel" parameterType="com.spring.god.yujin.model.SearchVO" resultType="int">
      select count(*)
	  from
		  (
	 	  select a.week as weekPrice , a.weekend AS weekenPrice,b.img AS IMG,b.name AS name,b.address AS address,b.largeCategoryontionCode
	      from
		      (
		      select distinct fk_largecategoryontioncode,min(weekprice) as week,min(weekenprice) as weekend
		      from
			      (
			      SELECT fk_largecategoryontioncode,b.weekprice as weekprice,b.weekenprice as weekenprice, roomoption
			      FROM
				      (
				      SELECT FK_PRODUCTID,b.checkin,b.checkout
				      FROM RESERVE1 A JOIN RESERVE2 B
				      ON a.reserveid = B.FK_RESERVEID
				      WHERE status=1 
				      <if test='checkin_date!="" and checkout_date!="" and checkin_date!=null and checkout_date!=null'>
				      	and (#{checkin_date} BETWEEN CHECKIN+1 AND CHECKOUT-1
				        OR  #{checkout_date} BETWEEN CHECKIN+1 AND CHECKOUT-1
				        OR (#{checkin_date} <![CDATA[<]]> checkin+1 AND checkout-1 <![CDATA[<]]> #{checkout_date}))
				      </if>
				      ) A RIGHT JOIN PRODUCT B
			      ON a.fk_productid = B.PRODUCTID
			      WHERE a.fk_productid IS NULL
			      <if test="minPrice>=0 and minPrice!=null and maxPrice>=0 and maxPrice!=null">
			      	and (weekprice between #{minPrice} and #{maxPrice} or weekenprice between #{minPrice} and #{maxPrice})
			      </if>
			      <if test="per!=0 and per!=null">
			          and  to_number(substr(B.roomtype,3)) <![CDATA[>=]]>#{per}
			      </if>
			      <if test="pontionList!=null">and 
			      	<foreach collection="pontionList" item="item" index="index" separator="or" open="(" close=")">
			      		roomoption like '%'||#{item}||'%'
			      	</foreach> 
		      	  </if>
			      )
		      group by fk_largecategoryontioncode
		      ) a join lontion b
		      on a.fk_largecategoryontioncode=b.LARGECATEGORYONTIONCODE   
		      where b.status=1
		      <if test="lontionList!=null">and
			      <foreach collection="lontionList" item="item" index="index" separator="or" open="(" close=")">
			      	 b.ontiontype like '%'||#{item}||'%'
			      </foreach> 
		      </if>
		      <if test="largeCategoryCodeList!=null">and
			      <foreach collection="largeCategoryCodeList" item="item" index="index" separator="or" open="(" close=")">
			      	 b.fk_largecategorycode like '%'||#{item}||'%'
			      </foreach> 
		      </if>
		      <if test='searchWord!="" and searchWord!=null'>
			  and (b.address like '%'||#{searchWord}||'%' or  b.name like '%'||#{searchWord}||'%')   
		      </if>
		      <if test='hotelName!="" and hotelName!=null'>
			  and b.name like '%'||#{hotelName}||'%'
		      </if>
	      ) a left join 
		      (select hotelidx,avg(star) as star,count(*) as starcnt
			  from review
			  group by hotelidx) b
      on a.largecategoryontioncode=b.hotelidx
      <if test="minStar>=0 and minStar!=null and maxStar>=0 and maxStar!=null">
      where nvl(b.star,0) between #{minStar} and #{maxStar}
      </if>
   </select>
   
   <select id="getTotalHotelList" parameterType="com.spring.god.yujin.model.SearchVO" resultType="com.spring.god.hyein.model.HotelRoomVO">
	   <if test='memberid==null or "".equals(memberid)'>
	      select * from
	      (
	      select ROW_NUMBER() OVER(ORDER BY a.name) NUM,a.*,b.star as star,b.starcnt as starcnt 
		  from
			  (
		 	  select a.week as weekPrice , a.weekend AS weekenPrice,b.img AS IMG,b.name AS name,b.address AS address,b.largeCategoryontionCode
		      from
			      (
			      select distinct fk_largecategoryontioncode,min(weekprice) as week,min(weekenprice) as weekend
			      from
				      (
				      SELECT fk_largecategoryontioncode,b.weekprice as weekprice,b.weekenprice as weekenprice, roomoption
				      FROM
					      (
					      SELECT FK_PRODUCTID,b.checkin,b.checkout
					      FROM RESERVE1 A JOIN RESERVE2 B
					      ON a.reserveid = B.FK_RESERVEID
					      WHERE status=1 
					      <if test='checkin_date!="" and checkout_date!="" and checkin_date!=null and checkout_date!=null'>
					      	and (#{checkin_date} BETWEEN CHECKIN+1 AND CHECKOUT-1
					        OR  #{checkout_date} BETWEEN CHECKIN+1 AND CHECKOUT-1
					        OR (#{checkin_date} <![CDATA[<]]> checkin+1 AND checkout-1 <![CDATA[<]]> #{checkout_date}))
					      </if>
					      ) A RIGHT JOIN PRODUCT B
				      ON a.fk_productid = B.PRODUCTID
				      WHERE a.fk_productid IS NULL
				      <if test="minPrice>=0 and minPrice!=null and maxPrice>=0 and maxPrice!=null">
				      	and (weekprice between #{minPrice} and #{maxPrice} or weekenprice between #{minPrice} and #{maxPrice})
				      </if>
				      <if test="pontionList!=null">and
				      	<foreach collection="pontionList" item="item" index="index"  separator="or" open="(" close=")">
				      		 roomoption like '%'||#{item}||'%'
				      	</foreach> 
			      	  </if>
				       <if test="per!=0 and per!=null">
			          	and  to_number(substr(B.roomtype,3)) <![CDATA[>=]]>#{per}
			          </if>
				      )
			      group by fk_largecategoryontioncode
			      ) a join lontion b
			      on a.fk_largecategoryontioncode=b.LARGECATEGORYONTIONCODE 
			      where b.status=1
			      <if test="lontionList!=null">and 	
			      <foreach collection="lontionList" item="item" index="index" separator="or" open="(" close=")">
			      	b.ontiontype like '%'||#{item}||'%'
			      </foreach> 
		      	  </if>  
		      	   <if test="largeCategoryCodeList!=null">and
			      <foreach collection="largeCategoryCodeList" item="item" index="index" separator="or" open="(" close=")">
			      	 b.fk_largecategorycode like '%'||#{item}||'%'
			      </foreach> 
	      		   </if>	
			      <if test='searchWord!="" and searchWord!=null'>
			      and (b.address like '%'||#{searchWord}||'%' or  b.name like '%'||#{searchWord}||'%')   
			      </if>
				  <if test='hotelName!="" and hotelName!=null'>
				  and b.name like '%'||#{hotelName}||'%'
			      </if>
		      ) a left join 
			      (select hotelidx,avg(star) as star,count(*) as starcnt
				  from review
				  group by hotelidx) b
	      on a.largecategoryontioncode=b.hotelidx
	       <if test="minStar>=0 and minStar!=null and maxStar>=0 and maxStar!=null">
	      where nvl(b.star,0) between #{minStar} and #{maxStar}
	      </if>
	      ) 
	      where num between #{startRno} and #{endRno}
	      <if test='sort!=null and !"".equals(sort)'>
	      order by ${sort}
	      </if>
	      <if test='sort==null or "".equals(sort)'>
	      order by largecategoryontioncode
	      </if>
      </if>
      
	   <if test='memberid!=null and !"".equals(memberid)'>
	      select a.*,b.fk_memberid as regDay from 
			(
		      select * from
		      (
		      select ROW_NUMBER() OVER(ORDER BY a.name) NUM,a.*,b.star as star,b.starcnt as starcnt 
			  from
				  (
			 	  select a.week as weekPrice , a.weekend AS weekenPrice,b.img AS IMG,b.name AS name,b.address AS address,b.largeCategoryontionCode
			      from
				      (
				      select distinct fk_largecategoryontioncode,min(weekprice) as week,min(weekenprice) as weekend
				      from
					      (
					      SELECT fk_largecategoryontioncode,b.weekprice as weekprice,b.weekenprice as weekenprice,roomoption
					      FROM
						      (
						      SELECT FK_PRODUCTID,b.checkin,b.checkout
						      FROM RESERVE1 A JOIN RESERVE2 B
						      ON a.reserveid = B.FK_RESERVEID
						      WHERE status=1 
						      <if test='checkin_date!="" and checkout_date!="" and checkin_date!=null and checkout_date!=null'>
						      	and (#{checkin_date} BETWEEN CHECKIN+1 AND CHECKOUT-1
						        OR  #{checkout_date} BETWEEN CHECKIN+1 AND CHECKOUT-1
						        OR (#{checkin_date} <![CDATA[<]]> checkin+1 AND checkout-1 <![CDATA[<]]> #{checkout_date}))
						      </if>
						      ) A RIGHT JOIN PRODUCT B
					      ON a.fk_productid = B.PRODUCTID
					      WHERE a.fk_productid IS NULL
					      <if test="minPrice>=0 and minPrice!=null and maxPrice>=0 and maxPrice!=null">
					      	and (weekprice between #{minPrice} and #{maxPrice} or weekenprice between #{minPrice} and #{maxPrice})
					      </if>
						   <if test="per!=0 and per!=null">
				          	and  to_number(substr(B.roomtype,3)) <![CDATA[>=]]>#{per}
				          </if>
				          <if test="pontionList!=null">and 
					      	<foreach collection="pontionList" item="item" index="index" separator="or" open="(" close=")">
					      		roomoption like '%'||#{item}||'%'
					      	</foreach> 
				      	  </if>
					      )
				      group by fk_largecategoryontioncode
				      ) a join lontion b
				      on a.fk_largecategoryontioncode=b.LARGECATEGORYONTIONCODE   
				      where b.status=1
				      <if test="lontionList!=null">and 
				      <foreach collection="lontionList" item="item" index="index" separator="or" open="(" close=")">
				      	b.ontiontype like '%'||#{item}||'%'
				      </foreach> 
			      	  </if>  
			      	   <if test="largeCategoryCodeList!=null">and
					      <foreach collection="largeCategoryCodeList" item="item" index="index" separator="or" open="(" close=")">
					      	 b.fk_largecategorycode like '%'||#{item}||'%'
					      </foreach> 
				      </if>
				      <if test='searchWord!="" and searchWord!=null'>
				      and (b.address like '%'||#{searchWord}||'%' or  b.name like '%'||#{searchWord}||'%')   
				      </if>
				      <if test='hotelName!="" and hotelName!=null'>
					  and b.name like '%'||#{hotelName}||'%'
				      </if>
			      ) a left join 
				      (select hotelidx,avg(star) as star,count(*) as starcnt
					  from review
					  group by hotelidx) b
		      on a.largecategoryontioncode=b.hotelidx
		      ) where num between #{startRno} and #{endRno}
			 ) a left join (     
	      select * from likelist where fk_memberid=#{memberid} and status=1) b
	      on a.largecategoryontioncode = b.fk_hotelid
	       <if test="minStar>=0 and minStar!=null and maxStar>=0 and maxStar!=null">
	      where nvl(b.star,0) between #{minStar} and #{maxStar}
	      </if>
	      <if test='sort!=null and !"".equals(sort)'>
	      order by ${sort}
	      </if>
	      <if test='sort==null or "".equals(sort)'>
	      order by largecategoryontioncode
	      </if>
      </if>
   </select>

   <select id="findHeart" parameterType="HashMap" resultType="int">
      SELECT COUNT(*)
      FROM LIKELIST
      WHERE FK_HOTELID = #{largeCategoryontionCode} AND FK_MEMBERID = #{memberId} AND STATUS = 1
   </select>
   
   <insert id="addHeart" parameterType="HashMap">
      INSERT INTO LIKELIST(LIKELISTID,FK_MEMBERID,FK_HOTELID)
      VALUES(SEQ_LIKELIST_LIKELISTID.NEXTVAL,#{memberId},#{largeCategoryontionCode})
   </insert>
   
   <update id="delHeart" parameterType="HashMap">
      UPDATE LIKELIST SET STATUS = 0
      WHERE FK_HOTELID = #{largeCategoryontionCode} AND FK_MEMBERID = #{memberId}
   </update>
   
   <select id="getTotalCntHeart" parameterType="com.spring.god.yujin.model.SearchVO" resultType="int">
		select count(*)
		from lontion a join (
							 select fk_hotelid from likelist where status=1 and fk_memberid=#{memberid}
							 ) b
		on a.largeCategoryontionCode=b.fk_hotelid 
   </select>
   
   <select id="getHeartList" parameterType="com.spring.god.yujin.model.SearchVO" resultType="com.spring.god.hyein.model.HotelRoomVO">
	select * from
	(
	select ROW_NUMBER() OVER(ORDER BY b.likelistid) NUM,address, name, img, largeCategoryontionCode, fk_hotelid as fk_LargeCategoryCode
	from lontion a join (
						 select likelistid,fk_hotelid from likelist where status=1 and fk_memberid=#{memberid}
						 ) b
	on a.largeCategoryontionCode=b.fk_hotelid
	)  
	where num between #{startRno} and #{endRno}
   </select>
   
   <select id="getPurchaseHistory" parameterType="int" resultType="com.spring.god.yujin.model.HistoryVO">
	select a.price,a.reserveDate,a.checkIn,a.checkOut,a.checkin-a.checkout+1 as noNight,a.productName,a.roomType,b.name,b.address,b.img 
	from
		(select a.price,a.reservedate,a.checkin,a.checkout,b.fk_largecategoryontioncode,b.productname,b.roomtype 
		from
			(select a.fk_productid,a.price,a.reservedate,b.checkin,b.checkout 
			from reserve1 a join reserve2 b
			on a.reserveid=b.fk_reserveid
			where status=1 and a.memberidx=#{memberidx}) a join product b
		on a.fk_productid=b.productid) a join lontion b
	on a.fk_largecategoryontioncode=largecategoryontioncode
   </select>
   
   <insert id="addReview" parameterType="com.spring.god.yujin.model.ReviewVO">
      INSERT INTO review(reviewidx,memberidx,hotelidx,roomidx,reserveidx,title,content,star,GROUPNO)
      VALUES(seq_review.nextval,5,1002,1001,11,#{title},#{content},#{star},0)
   </insert>
   
   <insert id="addReview_withfile" parameterType="com.spring.god.yujin.model.ReviewVO">
      INSERT INTO review(reviewidx,memberidx,hotelidx,roomidx,reserveidx,title,content,star,GROUPNO,imgidx)
      VALUES(seq_review.nextval,5,1002,1001,11,#{title},#{content},#{star},0,SEQ_REVIEW_IMG.nextval)
   </insert>
   
   <insert id="addReviewFile" parameterType="com.spring.god.yujin.model.ReviewVO">
      INSERT INTO REVIEW_IMG(imgidx,reviewidx,filename,orgfilename,filesize)
      VALUES(SEQ_REVIEW_IMG.currval,seq_review.currval,#{fileName},#{orgFileName},#{fileSize})
   </insert>
   
   <select id="getHistory" parameterType="int" resultType="com.spring.god.yujin.model.HistoryVO">
   		select fk_productId,price,reserveDate,checkIn,checkOut,noNight,title,content,star,regDate,fileName, b.* from
   		(select a.fk_productid,price,reservedate,checkin,checkout,checkout-checkin+1 as nonight,b.title,b.content,b.star,b.regdate,b.filename from
		(select reserveid,fk_productid,price,reservedate,b.* from reserve1 a join reserve2 b
		on a.reserveid=b.fk_reserveid
		where a.status=1 and a.memberidx=#{memberIdx}) 
		a left join 
		(select a.reserveidx,a.title,a.content,a.star,a.regdate,b.filename
		from review a left join (select reviewidx, listagg(filename,',') within group(order by reviewidx) as filename
		from review_img
		group by reviewidx) b
		on a.reviewidx=b.reviewidx
		where a.status=1 and a.memberidx=#{memberIdx}) 
		b
		on a.reserveid = b.reserveidx) 
		a left join
		(select a.largecategoryontioncode,a.name,a.businesstel,a.address,a.info,a.img,b.productid,b.productname
		from lontion a join product b
		on a.largecategoryontioncode = b.fk_largecategoryontioncode)
		b
		on a.fk_productid = b.productid
   </select>
   
   <select id="getRangePrice" resultType="com.spring.god.yujin.model.SearchVO">
   		select minPrice,maxPrice
   		from(select 1,min(weekprice) as minPrice, max(weekprice) as maxPrice 
   		from product 
   		group by 1)
   </select>

   <select id="getLargeCategoryCode" resultType="com.spring.god.yujin.model.SearchVO">
   		select * from LCATEGORY
   </select>

   <select id="getLontion" resultType="com.spring.god.yujin.model.SearchVO">
		select distinct col as lontion
		from(
			Select Regexp_Substr((select ontiontype from (select listagg(ontiontype||',')within group (order by ontiontype) as ontiontype
			from (select 1,ontiontype from lontion)
			group by 1)),'[^,]+', 1, Level) COL From Dual
			Connect By Regexp_Substr((select ontiontype from (select listagg(ontiontype||',')within group (order by ontiontype) as ontiontype
			from (select 1,ontiontype from lontion)
			group by 1)), '[^,]+', 1, Level) Is Not Null
		)
   </select>

   <select id="getPontion" resultType="com.spring.god.yujin.model.SearchVO">
		select distinct col as pontion
		from(
			Select Regexp_Substr((select roomoption from (select listagg(roomoption||',')within group (order by roomoption) as roomoption
			from (select 1,roomoption from product)
			group by 1)),'[^,]+', 1, Level) COL From Dual
			Connect By Regexp_Substr((select roomoption from (select listagg(roomoption||',')within group (order by roomoption) as roomoption
			from (select 1,roomoption from product)
			group by 1)), '[^,]+', 1, Level) Is Not Null
		)
   </select>
   

   
   
   
</mapper>
